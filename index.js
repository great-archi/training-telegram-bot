const telegramApi = require('node-telegram-bot-api')
const mongoose = require('mongoose')
const config = require('config')
const User = require('./models')
const {gameOptions, againOptions} = require('./options')

const bot = new telegramApi(config.get('token'), {polling: true})
const chats = {}

const createRandomNumber = async chatId => {
  chats[chatId] = Math.floor(Math.random() * 10)
  await bot.sendMessage(chatId, '–£–≥–∞–¥—ã–≤–∞–π)', gameOptions)
}

const start = async () => {
  try {
    await mongoose.connect(config.get('mongoUrl'), {
      useNewUrlParser: true,
      useUnifiedTopology: true
    })
  } catch (e) {
    console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î', e)
  }


  bot.setMyCommands([
    {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å–≤–∏–µ'},
    {command: '/game', description: '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É'},
    {command: '/info', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}
  ])

  bot.on('message', async msg => {
    const text = msg.text
    const chatId = msg.chat.id

    try {
      const user = await User.findOne({chatId})
      if (text === '/start') {
        if (!user) {
          const user = new User({chatId})
          await user.save()
        }
        return bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name} üëã\n
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/game - –∏–≥—Ä–∞ "–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ"
/info - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n
–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã üòâ`)
      }
      if (text === '/game') {
        await bot.sendMessage(chatId, '–Ø –∑–∞–≥–∞–¥–∞—é —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –µ–≥–æ —É–≥–∞–¥–∞—Ç—å!')
        return createRandomNumber(chatId)
      }
      if (text === '/info') {
        return bot.sendMessage(chatId, `*–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
–í–µ—Ä–Ω–æ: ${user.right}
–ù–µ–≤–µ—Ä–Ω–æ: ${user.wrong}`, {parse_mode: 'MarkdownV2'} )
      }
      return bot.sendMessage(chatId, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã...')
    } catch (e) {
      return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  })

  bot.on('callback_query', async query => {
    const msgId = query.message.message_id
    const chatId = query.message.chat.id
    const data = query.data
    try {
      const user = await User.findOne({chatId})
      if (data === '/again') {
        await bot.deleteMessage(chatId, msgId)
        return createRandomNumber(chatId)
      }

      await bot.deleteMessage(chatId, msgId)
      if (Number(data) === chats[chatId]) {
        user.right++
        await bot.sendMessage(chatId, `–ü–æ–∑–¥–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —Ü–∏—Ñ—Ä—É ${chats[chatId]}`, againOptions)
      } else {
        user.wrong++
        await bot.sendMessage(chatId, `–ù–µ –≤–µ—Ä–Ω–æ! –Ø –∑–∞–≥–∞–¥–∞–ª ${chats[chatId]}`, againOptions)
      }
      await user.save()
    } catch (e) {
      return bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    }
  })
}

start()